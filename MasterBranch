import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.util.*;
import java.util.Timer;



public class TicTacToe extends JPanel {

    JButton board[] = new JButton[9]; 
    static JButton swap = new JButton();
    int turn = 0;//if this number is a even, then put a X. If it's odd, then put an O
    private TextField tfCount;
    private static TextField tfTimer;
    static String currentMark = "X";
    static int interval;
    static Timer timer;
    static boolean playerVSai = true; //Player vs player set this to false

    public TicTacToe() {
    	setLayout(new GridLayout(4,4));       
    	initializeboard(); 
    	gameTimer();
    }

    public static void gameTimer() {
	    String secs = "10";
	    int delay = 1000;
	    int period = 1000;
	    timer = new Timer();
	    interval = Integer.parseInt(secs);
	    System.out.println(secs);	
	    timer.scheduleAtFixedRate(new TimerTask() {
	        public void run() {
	        	int j=  setInterval();
	            String time = Integer.toString(j);
	            tfTimer.setText(time);
	            System.out.println(interval);
	        }
	    }, delay, period);	
	}

	private static final int setInterval() {
	    if (interval == 1) {
	    	swap.doClick();
	        interval = 10;
	    }
	    return --interval;
	}

   /* public void timer(){
        TimerTask repeatedTask = new TimerTask() {
            public void run() {
                turn++;
            }
        };
        Timer timer = new Timer("Timer");     
        long delay  = 1000L;
        long period = 1000L;
        timer.scheduleAtFixedRate(repeatedTask, delay, period);
    }*/

    public void initializeboard() {
        for(int i = 0; i <= 8; i++) {
            board[i] = new JButton();
            board[i].setText("");
            board[i].addActionListener(new boardListener());
            add(board[i]); //adds this button to JPanel (note: no need for JPanel.add(...)
            			   //because this whole class is a JPanel already           
        }
        tfCount = new TextField("X"); // construct the TextField component with initial text
        tfCount.setEditable(false);       // set to read-only
        tfTimer = new TextField("0"); // construct the TextField component with initial text
        tfTimer.setEditable(false); 
        JPanel p = new JPanel(new BorderLayout()); //PREFERRED!
        add(tfCount);
        add(tfTimer);
        swap = new JButton();
        swap.setText("Swap");
        swap.addActionListener(new boardListener());
        add(swap); 
    }
    
    public void resetGame() {
        for(int i = 0; i <= 8; i++) {
            board[i].setText("");
        }
    }

    //When a button is clicked, it generates an ActionEvent. Thus, each button needs an ActionListener. 
    //When it is clicked, it goes to this listener class that I have created and goes to the actionPerformed 
    //method. There (and in this class), we decide what we want to do.

    private class boardListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            currentMark = tfCount.getText();
            //System.out.println(currentMark);
            JButton buttonClicked = (JButton)e.getSource(); //get the particular button that was clicked
            if(currentMark.equals("X")) {
                buttonClicked.setText("X");
                tfCount.setText("O");
                if (playerVSai)
                	AIPerformMove();
            }

            else if (currentMark.equals("O")) {
                buttonClicked.setText("O");
                tfCount.setText("X");               
            }     

            if(checkForWin() == true) {
                JOptionPane.showConfirmDialog(null, "Game Over.");
                resetGame();
            }
            turn++;
            interval = 10;
        }
        
        public void AIPerformMove() {
        	for (JButton b : board) {
        		if (b.getText() == "") {
        			b.doClick();
        			break;
        		}
        	}
        }

        public void changePlayer() {
            if (currentMark == "X") {
                currentMark = "o";
            }
            else {
                currentMark = "x";
            }
        }

        public boolean checkForWin() {
            /**   Reference: the button array is arranged like this as the board
             *      0 | 1 | 2
             *      3 | 4 | 5
             *      6 | 7 | 8
             */
        	
            //horizontal win check
            if( checkGrid(0,1) && checkGrid(1,2) ) //no need to put " == true" because the default check is for true
                return true;
            else if( checkGrid(3,4) && checkGrid(4,5) )
                return true;
            else if ( checkGrid(6,7) && checkGrid(7,8))
                return true;
            //vertical win check
            else if ( checkGrid(0,3) && checkGrid(3,6))
                return true;  
            else if ( checkGrid(1,4) && checkGrid(4,7))
                return true;
            else if ( checkGrid(2,5) && checkGrid(5,8))
                return true;
            //diagonal win check
            else if ( checkGrid(0,4) && checkGrid(4,8))
                return true;  
            else if ( checkGrid(2,4) && checkGrid(4,6))
                return true;
            else if (checkFull()) {
                return true;
            }
            else {
            	return false;
            }
        }

        public boolean checkGrid(int a, int b) {
            if ( board[a].getText().equals(board[b].getText()) && !board[a].getText().equals("") )
                return true;
            else
                return false;
        }
    }

    public boolean checkFull() {
    	 int marks = 0;
    	 for(int i = 0; i <= 8; i++) {
    		 if (!board[i].getText().equals("")) {
    			 marks++; 
    		 }
    		 System.out.print(marks);
    	 }
    	 if (marks == 9 )
    		 return true;
    	 return false;
    }

    public static void main(String[] args) {
        JFrame window = new JFrame("Tic-Tac-Toe");
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.getContentPane().add(new TicTacToe());
        window.setBounds(300,200,300,300);
        window.setVisible(true);
    }
}
