import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.util.*;
import java.util.List;
import java.util.Timer;


import java.io.*;
import javax.sound.sampled.*;


public class TicTacToe extends JPanel {

    JButton board[] = new JButton[9]; 
    static JButton swap = new JButton();
    static JButton undo = new JButton();
    int turn = 0;//if this number is a even, then put a X. If it's odd, then put an O
    private TextField tfCount;
    private static TextField tfTimer;
    static String currentMark = "X";
    static int interval;
    static Timer timer = new Timer();
    static boolean playerVSai = false; //Player vs player set this to false
    static boolean practiceMode = false;
    JButton[] buttons = new JButton[20];
    
    static enum aiDifficulty {
    	easy,
    	medium,
    	hard
    }
    
    static aiDifficulty currentDifficulty;

    public TicTacToe() {
    	Menu();
    }
    
    public void Menu() {
    	currentMark = "X";
    	removeAll();
    	setLayout(new GridLayout(5, 1));
    	JButton pvp = new JButton("Player VS Player");
    	pvp.addActionListener(new ActionListener() { 
    		public void actionPerformed(ActionEvent e) { 
    			playerVSai = false;
    			practiceMode = false;
    			Setup();
    		} 
    	});
    	add(pvp);
    	JButton pvae = new JButton("AI Easy");
    	pvae.addActionListener(new ActionListener() { 
    		public void actionPerformed(ActionEvent e) { 
    			playerVSai = true;
    			currentDifficulty = aiDifficulty.easy;
    			practiceMode = false;
    			Setup();
    		} 
    	});
    	add(pvae);
    	JButton pvam = new JButton("AI Medium");
    	pvam.addActionListener(new ActionListener() { 
    		public void actionPerformed(ActionEvent e) { 
    			playerVSai = true;
    			currentDifficulty = aiDifficulty.medium;
    			practiceMode = false;
    			Setup();
    		} 
    	});
    	add(pvam);
    	JButton pvah = new JButton("AI Hard");
    	pvah.addActionListener(new ActionListener() { 
    		public void actionPerformed(ActionEvent e) { 
    			playerVSai = true;
    			currentDifficulty = aiDifficulty.hard;
    			practiceMode = false;
    			Setup();
    		} 
    	});
    	add(pvah);
    	JButton t = new JButton("Training");
    	t.addActionListener(new ActionListener() { 
    		public void actionPerformed(ActionEvent e) { 
    			playerVSai = false;
    			practiceMode = true;
    			Setup();
    		} 
    	});
    	add(t);
    	validate();
    	repaint();
    }
    
    public void Setup() {
    	removeAll();
    	timer.cancel();
    	turn = 0;
    	setLayout(new GridLayout(4,4));       
    	initializeboard(); 
    	if (practiceMode == false){
    	gameTimer();}
    	if	(playerVSai) {   
    		swap.doClick();
    	}
    	validate();
    	repaint();
    }

    public static void gameTimer() {
	    String secs = "10";
	    int delay = 1000;
	    int period = 1000;
	    timer = new Timer();
	    interval = Integer.parseInt(secs);	
	    timer.scheduleAtFixedRate(new TimerTask() {
	        public void run() {
	        	int j=  setInterval();
	            String time = Integer.toString(j);
	            tfTimer.setText(time);
	        }
	    }, delay, period);	
	}

	private static final int setInterval() {
	    if (interval == 1) {
	    	swap.doClick();
	        interval = 10;
	    }
	    return --interval;
	}

	
	
	public static void play(String filename)
	{
	    try
	    {
	        Clip clip = AudioSystem.getClip();
	        clip.open(AudioSystem.getAudioInputStream(new File(filename)));
	        clip.start();
	    }
	    catch (Exception exc)
	    {
	        exc.printStackTrace(System.out);
	    }
	}
	
	
	
    public void initializeboard() {
        board = new JButton[9];
        buttons = new JButton[20];
        for(int i = 0; i <= 8; i++) {
            board[i] = new JButton("" + i);
            board[i].setText("");
            board[i].addActionListener(new boardListener());
            add(board[i]); //adds this button to JPanel (note: no need for JPanel.add(...)
            			   //because this whole class is a JPanel already           
        } 
        
        tfCount = new TextField("X"); // construct the TextField component with initial text
        tfCount.setEditable(false);       // set to read-only
        tfTimer = new TextField("0"); // construct the TextField component with initial text
        tfTimer.setEditable(false); 
        
        
        if (practiceMode == true){
                  
             undo = new JButton();
             undo.setText("undo");
             undo.addActionListener(new undo());
             add(undo); 
        }
        else{  
        add(tfCount);
        add(tfTimer);  
        swap = new JButton();
        swap.setText("Swap");
        swap.addActionListener(new boardListener());
        //add(swap); 
        }
        JPanel p = new JPanel(new BorderLayout()); //PREFERRED!  
    }

    private class undo implements ActionListener {
        public void actionPerformed(ActionEvent e) {
        	if (turn > 0) {        	
        		JButton lastButton = buttons[turn-1]; 
        		lastButton.setText("");
        		turn--;
        	}
        	
        }
     }
    //When a button is clicked, it generates an ActionEvent. Thus, each button needs an ActionListener. 
    //When it is clicked, it goes to this listener class that I have created and goes to the actionPerformed 
    //method. There (and in this class), we decide what we want to do.

    private class boardListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
        	
            JButton buttonClicked = (JButton)e.getSource(); //get the particular button that was clicked
        	System.out.print(buttonClicked.getText());
            if (buttonClicked.getText() != "" && buttonClicked != swap)
            	return;
        	
            currentMark = tfCount.getText();
        buttons[turn] = buttonClicked;

            if(currentMark.equals("X")) {
                buttonClicked.setText("X");
                tfCount.setText("O");
                turn++;
                
            }
            else if (currentMark.equals("O")) {
                buttonClicked.setText("O");
                tfCount.setText("X");   
                turn++;
              
            }     
            if(checkForWin() == true) {
            	play("win.wav");
            	timer.cancel();
                int result = JOptionPane.showConfirmDialog(null, "Do you want to play again?", "Game Over", JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {
                	Setup();
                } else {
                	Menu();
                }
                return;
            }
          
            if (playerVSai && currentMark.equals("X")) {
            	switch (currentDifficulty) {
            		case easy:
            			AIPerformEasyMove();
            			break;
            		case medium:
            			AIPerformMediumMove();
            			break;
            		case hard:
            			AIPerformHardMove();
            			break;
            	}
            }
           
            interval = 10;
        }
        
        public void AIPerformEasyMove() {
        	List<Integer> openSpots = new ArrayList<Integer>();
        	for (int i = 0; i < 9; i++) {
        		if (board[i].getText() == "")
        			openSpots.add(i);
        	}
        	
        	Random rnd = new Random();
        	int index = rnd.nextInt(openSpots.size());
        	board[openSpots.get(index)].doClick();
        }
        
        public void AIPerformMediumMove() {
        	Random rnd = new Random();
        	int value = rnd.nextInt(100) + 1; //+ 1 because nextInt is from 0 - 99. now it is 1 - 100
        	if (value <= 50)
        		AIPerformEasyMove();
        	else
        		AIPerformHardMove();
        }
        
        public void AIPerformHardMove() {
        	boolean winPossible = false;
        	int boardIndex = -1;
        	//First Row to stop win
        	if (checkGrid(0, 1) && board[2].getText() == "") {
        		if (board[0].getText() == "O") {
        			winPossible = true;
        		}
    			boardIndex = 2;
        	} else if (checkGrid(1, 2) && board[0].getText() == "") {
        		if (board[1].getText() == "O") {
        			winPossible = true;
        		}
    			boardIndex = 0;
        	} else if (checkGrid(0, 2) && board[1].getText() == "") {
        		if (board[0].getText() == "O") {
        			winPossible = true;
        		}
    			boardIndex = 1;
        	}
        	
        	if (!winPossible) {
	        	//Second Row to stop win
	        	if (checkGrid(3, 4) && board[5].getText() == "") {
	        		if (board[3].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 5;
	        	} else if (checkGrid(4, 5) && board[3].getText() == "") {
	        		if (board[4].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 3;
	        	} else if (checkGrid(3, 5) && board[4].getText() == "") {
	        		if (board[3].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 4;
	        	}
        	}
        	
        	if (!winPossible) {
	        	//Third Row to stop win
	        	if (checkGrid(6, 7) && board[8].getText() == "") {
	        		if (board[6].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 8;
	        	} else if (checkGrid(7, 8) && board[6].getText() == "") {
	        		if (board[7].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 6;
	        	} else if (checkGrid(6, 8) && board[7].getText() == "") {
	        		if (board[6].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 7;
	        	}
        	}
        	
        	if (!winPossible) {
	        	//First Column to stop win
	        	if (checkGrid(0, 3) && board[6].getText() == "") {
	        		if (board[0].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 6;
	        	} else if (checkGrid(3, 6) && board[0].getText() == "") {
	        		if (board[3].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 0;
	        	} else if (checkGrid(0, 6) && board[3].getText() == "") {
	        		if (board[0].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 3;
	        	}
        	}
        	
        	if (!winPossible) {
	        	//Second Column to stop win
	        	if (checkGrid(1, 4) && board[7].getText() == "") {
	        		if (board[1].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 7;
	        	} else if (checkGrid(4, 7) && board[1].getText() == "") {
	        		if (board[4].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 1;
	        	} else if (checkGrid(1, 7) && board[4].getText() == "") {
	        		if (board[1].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 4;
	        	}
        	}
        	
        	if (!winPossible) {
	        	//Third Column to stop win
	        	if (checkGrid(2, 5) && board[8].getText() == "") {
	        		if (board[2].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 8;
	        	} else if (checkGrid(5, 8) && board[2].getText() == "") {
	        		if (board[5].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 2;
	        	} else if (checkGrid(2, 8) && board[5].getText() == "") {
	        		if (board[2].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 5;
	        	}
        	}
        	
        	if (!winPossible) {
	        	//Diagonal to stop win
	        	if (checkGrid(0, 8) && board[4].getText() == "" || checkGrid(2, 6) && board[4].getText() == "") {
	        		if (board[0].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 4;
	        	} else if (checkGrid(0, 4) && board[8].getText() == "") {
	        		if (board[0].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 8;
	        	} else if (checkGrid(4, 8) && board[0].getText() == "") {
	        		if (board[4].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 0;
	        	} else if (checkGrid(2, 4) && board[6].getText() == "") {
	        		if (board[2].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 6;
	        	} else if (checkGrid(4, 6) && board[2].getText() == "") {
	        		if (board[4].getText() == "O") {
	        			winPossible = true;
	        		}
	    			boardIndex = 2;
	        	}
        	}
        	
        	if (boardIndex > -1) {
        		board[boardIndex].doClick();
        		return;
        	}
        	
        	if (board[0].getText() == "")
        		board[0].doClick();
        	else if (board[8].getText() == "")
        		board[8].doClick();
        	else if (board[2].getText() == "")
        		board[2].doClick();
        	else if (board[6].getText() == "")
        		board[6].doClick();
        	else if (board[4].getText() == "")
        		board[4].doClick();
        	else if (board[1].getText() == "")
        		board[1].doClick();
        	else if (board[3].getText() == "")
        		board[3].doClick();
        	else if (board[5].getText() == "")
        		board[5].doClick();
        	else if (board[7].getText() == "")
        		board[7].doClick();
        }

        public void changePlayer() {
            if (currentMark == "X") {
                currentMark = "o";
            }
            else {
                currentMark = "x";
            }
        }

        public boolean checkForWin() {
            /**   Reference: the button array is arranged like this as the board
             *      0 | 1 | 2
             *      3 | 4 | 5
             *      6 | 7 | 8
             */
        	
            //horizontal win check
            if( checkGrid(0,1) && checkGrid(1,2) ) //no need to put " == true" because the default check is for true
                return true;
            else if( checkGrid(3,4) && checkGrid(4,5) )
                return true;
            else if ( checkGrid(6,7) && checkGrid(7,8))
                return true;
            //vertical win check
            else if ( checkGrid(0,3) && checkGrid(3,6))
                return true;  
            else if ( checkGrid(1,4) && checkGrid(4,7))
                return true;
            else if ( checkGrid(2,5) && checkGrid(5,8))
                return true;
            //diagonal win check
            else if ( checkGrid(0,4) && checkGrid(4,8))
                return true;  
            else if ( checkGrid(2,4) && checkGrid(4,6))
                return true;
            else if (checkFull()) {
                return true;
            }
            else {
            	return false;
            }
        }

        public boolean checkGrid(int a, int b) {
            if ( board[a].getText().equals(board[b].getText()) && !board[a].getText().equals("") )
                return true;
            else
                return false;
        }
    }

    public boolean checkFull() {
    	 int marks = 0;
    	 for(int i = 0; i <= 8; i++) {
    		 if (!board[i].getText().equals("")) {
    			 marks++; 
    		 }
    	 }
    	 if (marks == 9 )
    		 return true;
    	 return false;
    }

    public static void main(String[] args) {
        JFrame window = new JFrame("Tic-Tac-Toe");
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.getContentPane().add(new TicTacToe());
        window.setBounds(300,200,300,300);
        window.setVisible(true);
       
    }
}
